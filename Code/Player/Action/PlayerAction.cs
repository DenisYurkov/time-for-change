//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/Action/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fe3dc1ca-14ee-4be4-8ac1-937cb4daa149"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""801cb972-2328-47c5-882c-e5eebbfdff8e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TaskMenu"",
                    ""type"": ""Button"",
                    ""id"": ""00250f77-8258-4b10-8a5a-4fb140d74f3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EscMenu"",
                    ""type"": ""Button"",
                    ""id"": ""f2c7600a-f38d-4921-bc07-7df2b4a07b32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Time"",
                    ""type"": ""Button"",
                    ""id"": ""35fedb67-db86-4581-86e2-d1420410fb85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LMB"",
                    ""type"": ""Button"",
                    ""id"": ""316bf9f0-7286-4c32-b42e-613455ab8373"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""ab2a926f-b17a-49fb-b77d-7dd5c4f24466"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InteractButton"",
                    ""type"": ""Button"",
                    ""id"": ""12359ce9-b5bc-454e-a6a6-aa411c0de985"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TalkButton"",
                    ""type"": ""Button"",
                    ""id"": ""9dea0a02-dbe5-4493-bf9e-7429d4a50c4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b8b71aa1-4d6a-42b6-87fa-11e763fa82b5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""86230824-e060-411f-b6cd-063d040fdf68"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1909ebac-c532-4d1a-ad34-9ae05165da03"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6cd718f5-afbe-413f-9015-785024fe0547"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ac5f0f18-32fc-4c4b-b8a4-c2899e20ee59"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f98480a7-e53f-4e0e-9b21-d422a262296a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TaskMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""496193b2-cff5-43dc-b6ac-879db7dfeec7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EscMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de2ee9cf-863c-4aa3-875c-99d4c6bf7eca"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4a24363-1c25-4ee8-9a36-15ffda5780c8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6563ba9d-d6c2-4387-bb65-a64b05bbbc36"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ce32666-104d-4ba9-9bca-f69180c1d641"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""675f683c-4ab1-4da8-8391-ad3e12ada74a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TalkButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_TaskMenu = m_Player.FindAction("TaskMenu", throwIfNotFound: true);
        m_Player_EscMenu = m_Player.FindAction("EscMenu", throwIfNotFound: true);
        m_Player_Time = m_Player.FindAction("Time", throwIfNotFound: true);
        m_Player_LMB = m_Player.FindAction("LMB", throwIfNotFound: true);
        m_Player_Mouse = m_Player.FindAction("Mouse", throwIfNotFound: true);
        m_Player_InteractButton = m_Player.FindAction("InteractButton", throwIfNotFound: true);
        m_Player_TalkButton = m_Player.FindAction("TalkButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_TaskMenu;
    private readonly InputAction m_Player_EscMenu;
    private readonly InputAction m_Player_Time;
    private readonly InputAction m_Player_LMB;
    private readonly InputAction m_Player_Mouse;
    private readonly InputAction m_Player_InteractButton;
    private readonly InputAction m_Player_TalkButton;
    public struct PlayerActions
    {
        private @PlayerAction m_Wrapper;
        public PlayerActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @TaskMenu => m_Wrapper.m_Player_TaskMenu;
        public InputAction @EscMenu => m_Wrapper.m_Player_EscMenu;
        public InputAction @Time => m_Wrapper.m_Player_Time;
        public InputAction @LMB => m_Wrapper.m_Player_LMB;
        public InputAction @Mouse => m_Wrapper.m_Player_Mouse;
        public InputAction @InteractButton => m_Wrapper.m_Player_InteractButton;
        public InputAction @TalkButton => m_Wrapper.m_Player_TalkButton;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @TaskMenu.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskMenu;
                @TaskMenu.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskMenu;
                @TaskMenu.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTaskMenu;
                @EscMenu.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscMenu;
                @EscMenu.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscMenu;
                @EscMenu.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscMenu;
                @Time.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTime;
                @Time.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTime;
                @Time.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTime;
                @LMB.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLMB;
                @LMB.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLMB;
                @LMB.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLMB;
                @Mouse.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse;
                @InteractButton.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractButton;
                @InteractButton.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractButton;
                @InteractButton.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractButton;
                @TalkButton.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTalkButton;
                @TalkButton.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTalkButton;
                @TalkButton.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTalkButton;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @TaskMenu.started += instance.OnTaskMenu;
                @TaskMenu.performed += instance.OnTaskMenu;
                @TaskMenu.canceled += instance.OnTaskMenu;
                @EscMenu.started += instance.OnEscMenu;
                @EscMenu.performed += instance.OnEscMenu;
                @EscMenu.canceled += instance.OnEscMenu;
                @Time.started += instance.OnTime;
                @Time.performed += instance.OnTime;
                @Time.canceled += instance.OnTime;
                @LMB.started += instance.OnLMB;
                @LMB.performed += instance.OnLMB;
                @LMB.canceled += instance.OnLMB;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @InteractButton.started += instance.OnInteractButton;
                @InteractButton.performed += instance.OnInteractButton;
                @InteractButton.canceled += instance.OnInteractButton;
                @TalkButton.started += instance.OnTalkButton;
                @TalkButton.performed += instance.OnTalkButton;
                @TalkButton.canceled += instance.OnTalkButton;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTaskMenu(InputAction.CallbackContext context);
        void OnEscMenu(InputAction.CallbackContext context);
        void OnTime(InputAction.CallbackContext context);
        void OnLMB(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnInteractButton(InputAction.CallbackContext context);
        void OnTalkButton(InputAction.CallbackContext context);
    }
}
